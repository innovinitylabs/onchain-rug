// Simple script to extract base64 content from the hex data
const fs = require('fs');

// Your hex data from cast call
const hexData = "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000007bc9427c8730b87ab3fad10da63f0c4b9e9e0a5f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000020315a6e56755933527062323467633256306458416f4b58747562326c7a5a564e6c5a57516f63796b7364326c755a4739334c6d51395a6e5675593352706232346f4a436c3764326c755a4739334c6e4279626d64545a57566b5053516c4d6a45304e7a51344d7a59304e7978336157356b6233637563484a755a314e6c5a5751385054416d4a6968336157356b6233637563484a755a314e6c5a575172505449784e4463304f444d324e445970665378336157356b62336375596a316d6457356a64476c766269677065334a6c64485679626942336157356b6233637563484a755a314e6c5a5751394d5459344d44637164326c755a4739334c6e4279626d64545a57566b4a5449784e4463304f444d324e4463734b486470626d527664793577636d356e5532566c5a4330784b5338794d5451334e44677a4e6a5132665378336157356b623363755a43687a4b54746a636d5668644756445957353259584d6f614373304b6d5973647973304b6d59704c6e4268636d567564436769636e566e49696b7363476c345a5778455a57357a615852354b4449754e536b73645367704c4764305a4367704c473576544739766343677066575a31626d4e30615739754948556f4b5874705a69676863487838495841755932397362334a7a4b584a6c64485679626a74735a5851674a4431774c6d4e76624739796331737758537830505841755932397362334a7a577a42644c4755394f546b354c4777394c5445375a6d39794b47786c644342764947396d494841755932397362334a7a4b5874735a585167636a316a62327876636968764b537866505368795a57516f63696b725a334a6c5a57346f63696b72596d78315a5368794b536b764d7a74665047556d4a69686c505638734a4431764b537866506d776d4a69687350563873644431764b58316b644431735a584a77513239736233496f593239736233496f4a436b73593239736233496f4d436b734c6a51704c4778305057786c636e4244623278766369686a62327876636968304b53786a62327876636967794e5455704c43347a4b58316d6457356a64476c766269426b636d46334b436c375a6d39794b47786c6443416b4947396d4b474a685932746e636m3931626m516f4d6a49794c4449794d6977794d6a49704c4842316332676f4b537830636d4675633278686447556f64326c6b644767764d69786f5a576c6e614851764d696b73636d39305958526c4b46424a4c7a49704c4852795957357a624746305a536774614756705a3268304c7a49734c5864705a48526f4c7a49704c4842316332676f4b537830636d4675633278686447556f4d69706d4c4449715a696b73633251704b57527a4b4351704f335273506a416d4a6d52306232776f545746306143356d624739766369683062436b704c484276634367704c47526d4b436b735a47772b4d43596d5a4752764b453168644767755a6d78766233496f5a4777704b5378776233416f4b58316d6457356a64476c766269426b6379676b4b5874735a58516764443133634373784c475539643351724d54746d6233496f62475630494777394d447473504863376243733964436c6d6233496f62475630494738394a4335354f3238384a4335354b795175614474764b7a316c4b5874735a585167636a316a623278766369676b4c6e426a4b537866505345784f326c6d4b48526b4c6d786c626d6430614434774b58746d6233496f624756304947346762325967644751706157596f62443439626935344a695a7350473475654374754c6e64705a48526f4a695a76506a31754c6e6b6d4a6d3838626935354b323475614756705a3268304b587466505345774f324a795a574672665831735a585167615431795a57516f63696b7264326c755a4739334c6d456f4c5445314c4445314b537868505764795a5756754b4849704b336470626d5276647935684b4330784e5377784e536b73597a31696248566c4b4849704b336470626d5276647935684b4330784e5377784e536b376157596f58796c3762475630494751394b476b725953746a4b5338794c4763395a4477784d6a672f624851365a485137615431795a57516f5a796b735954316e636m566c6269686e4b53786a50574a736457556f5a796c396154316a6232357a64484a686157346f615377774c4449314e536b735954316a6232357a64484a686157346f595377774c4449314e536b73597a316a6232357a64484a686157346f597977774c4449314e536b735a6d6c73624368704c47457359796b73626m395464484a766132556f4b5474795a574e304b4777724c6a557163326c754b4334774e5370764b5378764c4864774c47557066575a76636968735a5851676554306b4c6e6b376554776b4c6e6b724a43356f4f336b72505755705a6d39794b47786c6443426950544137596a78334f324972505851706532786c6443427450574e76624739794b43517563474d704c464d39495445376157596f64475175624756755a33526f506a417065325a76636968735a585167654342765a6942305a436c705a696869506a31344c6e676d4a6d4938654335344b33677564326c6b6447676d4a6e6b2b505867756553596d655478344c6e6b726543356f5a576c6e6148517065314d3949544137596e4a6c5957743966576c6d4b434a74496a3039505351756433516d4a69517563324d70626m3970632556f4c6a4571596977754d5370354b5434754e53596d4b473039593239736233496f4a43357a59796b704f325673633255676157596f496e5169505430394a43353364436c376247563049477339626m3970632556f4c6a41314b6d49314c6a41314b6e6b704f3230396247567963454e76624739794b463873626977754e53707562326c7a5a5367754d444971627977754d44497163696b734d4377784c44417364436b704c473576553352796232746c4b436b73636m566a6443676b4c4851734d6977794b58316d6233496f62475630494777394d447473504863376243733964436c6d6233496f62475630494738394d447476504767376279733964436c376247563049484939626m3970632556f4c6a417a4b6d77734c6a417a4b6d38704f33492b4c6a592f4b475a706247776f4d6a55314c4449314e5377794e5455734d6a41704c473576553352796232746c4b436b73636m566a644368464c453173644330784c4755744d536c395a6e567559335270623234675a4852764b436c376348567a614367704c474a735a57356b5457396b5a53684e565578555356424d57536b375a6d39794b47786c6443416b505441374a4478334f795172505449705a6d39794b47786c64434230505441376444786f4f335172505449706532786c6443426c4f325a706247776f5953786a4c47517361536b73626m395464484a766132556f4b5378795a574e304b474d735a4377344c4449704b5474705a69676b506a307a4b575a76636968735a5851675a7a30774f326338647a746e4b7a30304b575a76636968735a585167636a30774f336b38614474354b7a30304b57357661584e6c4b4334774d44557159696b37636m566a644368694c486b72646978304c4864304b58316d6233496f6247563049486f394a4335354f336f384a4335354b795175614474364b7a30794b6d55705a6d39794b47786c6443424350544137516a78334f3049725054497164436c6d615778734b4441734d4377774c4451774b53787562314e30636d39725a5367704c484a6c5933516f517978564c4863745179786f4c5655704f326c6d4b476f384d5441706532786c6443427850586470626d5276647935684b4441734d536b73587a30754f445571644474705a696879506c38706532786c6443427550586470626d5276647935684b4445734e436b73615431336157356b62336375595367744d5377784b5377754d7a35336157356b62336375596967704a69596f6569733964326c755a4739334c6d456f4c5449734d696b704c485a6c636e526c6543686b4b336f7364696c395a57356b553268686347556f4b58313966575a31626d4e30615739754947646a6343676b4c4851735a5378734c4738706532786c6443427950563873557a31694c6d786c626m64306143786e50574e624d463075624756755a33526f4f325a76636968735a585167655430774f336b385a4474354b7973705a6d39794b47786c6443426950544137596a786e4f3249724b796c705a6967694d5349395054316a57336c6457324a644b5874735a585167625431354c464d395a7930784c5749376369357764584e6f4b4874344f6e5172625370704c486b365a5374544b6d457364326c6b644767366153786f5a576c6e614851365958307066584a6c644856796269427966513d3d0a000000000000000000000000000000";

function extractBase64() {
  console.log('🔍 Extracting base64 content from hex data...');

  try {
    // Remove 0x prefix
    const cleanHex = hexData.startsWith('0x') ? hexData.slice(2) : hexData;
    console.log('📦 Clean hex length:', cleanHex.length, 'characters');

    // Convert hex to buffer
    const buffer = Buffer.from(cleanHex, 'hex');
    console.log('📏 Total bytes:', buffer.length);

    // Convert to string to look for base64 patterns
    const rawString = buffer.toString('utf8');
    console.log('📄 Raw string length:', rawString.length);

    // Look for base64 pattern (long sequences of base64 chars ending with ==)
    const base64Pattern = /[A-Za-z0-9+/]{500,}=*==/;
    const matches = rawString.match(base64Pattern);

    if (matches && matches.length > 0) {
      console.log('🎯 Found base64 content!');
      console.log('Length:', matches[0].length);
      console.log('Preview:', matches[0].substring(0, 100) + '...');

      // Save the extracted content
      fs.writeFileSync('extracted_p5_base64.txt', matches[0]);
      console.log('💾 Saved to extracted_p5_base64.txt');

      // Try to decode it
      try {
        const decoded = Buffer.from(matches[0], 'base64');
        console.log('✅ Valid base64! Decoded length:', decoded.length);

        // Save decoded content
        fs.writeFileSync('extracted_p5_decoded.js', decoded.toString('utf8'));
        console.log('💾 Saved decoded JavaScript to extracted_p5_decoded.js');

        // Check if it looks like p5.js
        const decodedStr = decoded.toString('utf8');
        if (decodedStr.includes('p5') || decodedStr.includes('function') || decodedStr.includes('let _p5')) {
          console.log('🎨 Looks like p5.js library! ✅');
        } else {
          console.log('❓ Content extracted but may not be p5.js');
        }

      } catch (decodeError) {
        console.log('❌ Base64 decode failed:', decodeError.message);
      }

    } else {
      console.log('❌ No base64 content found');
    }

    // Also try to find any == patterns
    const equalsPattern = /==/;
    const equalsMatches = rawString.match(equalsPattern);
    console.log('📊 Found', equalsMatches ? equalsMatches.length : 0, 'potential base64 endings');

  } catch (error) {
    console.error('❌ Error:', error.message);
  }
}

extractBase64();
